// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using MagicFire.HuanHuoUFrame;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.IOC;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public partial class SkillEntityViewModelBase : GongFaEntityViewModel {
        
        private P<Int32> _isIceFreezingProperty;
        
        private Signal<OnSkillStartCastCommand> _OnSkillStartCast;
        
        private Signal<OnSkillEndCastCommand> _OnSkillEndCast;
        
        private Signal<RequestCastSkillCommand> _RequestCastSkill;
        
        private Signal<OnSkillStartSingCommand> _OnSkillStartSing;
        
        public SkillEntityViewModelBase(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
        
        public virtual P<Int32> isIceFreezingProperty {
            get {
                return _isIceFreezingProperty;
            }
            set {
                _isIceFreezingProperty = value;
            }
        }
        
        public virtual Int32 isIceFreezing {
            get {
                return isIceFreezingProperty.Value;
            }
            set {
                isIceFreezingProperty.Value = value;
            }
        }
        
        public virtual Signal<OnSkillStartCastCommand> OnSkillStartCast {
            get {
                return _OnSkillStartCast;
            }
            set {
                _OnSkillStartCast = value;
            }
        }
        
        public virtual Signal<OnSkillEndCastCommand> OnSkillEndCast {
            get {
                return _OnSkillEndCast;
            }
            set {
                _OnSkillEndCast = value;
            }
        }
        
        public virtual Signal<RequestCastSkillCommand> RequestCastSkill {
            get {
                return _RequestCastSkill;
            }
            set {
                _RequestCastSkill = value;
            }
        }
        
        public virtual Signal<OnSkillStartSingCommand> OnSkillStartSing {
            get {
                return _OnSkillStartSing;
            }
            set {
                _OnSkillStartSing = value;
            }
        }
        
        public override void Bind() {
            base.Bind();
            this.OnSkillStartCast = new Signal<OnSkillStartCastCommand>(this);
            this.OnSkillEndCast = new Signal<OnSkillEndCastCommand>(this);
            this.RequestCastSkill = new Signal<RequestCastSkillCommand>(this);
            this.OnSkillStartSing = new Signal<OnSkillStartSingCommand>(this);
            _isIceFreezingProperty = new P<Int32>(this, "isIceFreezing");
        }
        
        public virtual void Execute(OnSkillStartCastCommand argument) {
            this.OnSkillStartCast.OnNext(argument);
        }
        
        public virtual void Execute(OnSkillEndCastCommand argument) {
            this.OnSkillEndCast.OnNext(argument);
        }
        
        public virtual void Execute(RequestCastSkillCommand argument) {
            this.RequestCastSkill.OnNext(argument);
        }
        
        public virtual void Execute(OnSkillStartSingCommand argument) {
            this.OnSkillStartSing.OnNext(argument);
        }
        
        public virtual void OnSkillStartCast_(Int32 skillID, String argsString, Single castTime) {
            var cmd = new OnSkillStartCastCommand();
            cmd.skillID = skillID;
            cmd.argsString = argsString;
            cmd.castTime = castTime;
            this.OnSkillStartCast.OnNext(cmd);
        }
        
        public virtual void OnSkillEndCast_(Int32 skillID, String argsString) {
            var cmd = new OnSkillEndCastCommand();
            cmd.skillID = skillID;
            cmd.argsString = argsString;
            this.OnSkillEndCast.OnNext(cmd);
        }
        
        public virtual void RequestCastSkill_(Int32 gongFaID, Int32 skillIndex, String argsString) {
            var cmd = new RequestCastSkillCommand();
            cmd.gongFaID = gongFaID;
            cmd.skillIndex = skillIndex;
            cmd.argsString = argsString;
            this.RequestCastSkill.OnNext(cmd);
        }
        
        public virtual void OnSkillStartSing_(Single singTime) {
            var cmd = new OnSkillStartSingCommand();
            cmd.singTime = singTime;
            this.OnSkillStartSing.OnNext(cmd);
        }
        
        public override void Read(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Read(stream);
            this.isIceFreezing = stream.DeserializeInt("isIceFreezing");;
        }
        
        public override void Write(uFrame.Kernel.Serialization.ISerializerStream stream) {
            base.Write(stream);
            stream.SerializeInt("isIceFreezing", this.isIceFreezing);
        }
        
        protected override void FillCommands(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelCommandInfo> list) {
            base.FillCommands(list);
            list.Add(new ViewModelCommandInfo("OnSkillStartCast", OnSkillStartCast) { ParameterType = typeof(OnSkillStartCastCommand) });
            list.Add(new ViewModelCommandInfo("OnSkillEndCast", OnSkillEndCast) { ParameterType = typeof(OnSkillEndCastCommand) });
            list.Add(new ViewModelCommandInfo("RequestCastSkill", RequestCastSkill) { ParameterType = typeof(RequestCastSkillCommand) });
            list.Add(new ViewModelCommandInfo("OnSkillStartSing", OnSkillStartSing) { ParameterType = typeof(OnSkillStartSingCommand) });
        }
        
        protected override void FillProperties(System.Collections.Generic.List<uFrame.MVVM.ViewModels.ViewModelPropertyInfo> list) {
            base.FillProperties(list);
            // PropertiesChildItem
            list.Add(new ViewModelPropertyInfo(_isIceFreezingProperty, false, false, false, false));
        }
    }
    
    public partial class SkillEntityViewModel {
        
        public SkillEntityViewModel(uFrame.Kernel.IEventAggregator aggregator) : 
                base(aggregator) {
        }
    }
}
