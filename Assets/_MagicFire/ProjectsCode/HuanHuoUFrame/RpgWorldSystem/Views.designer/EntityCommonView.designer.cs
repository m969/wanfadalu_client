// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using MagicFire.HuanHuoUFrame;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class EntityCommonViewBase : uFrame.MVVM.Views.ViewBase {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _entityName;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("OnLeaveWorld")]
        [UnityEngine.HideInInspector()]
        public bool _BindOnLeaveWorld = true;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("OnDestroy")]
        [UnityEngine.HideInInspector()]
        public bool _BindOnDestroy = true;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(EntityCommonViewModel);
            }
        }
        
        public EntityCommonViewModel EntityCommon {
            get {
                return (EntityCommonViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as EntityCommonViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var entitycommonview = ((EntityCommonViewModel)model);
            entitycommonview.entityName = this._entityName;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.EntityCommon to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindOnLeaveWorld) {
                this.BindCommandExecuted(this.EntityCommon.OnLeaveWorld, this.OnLeaveWorldExecuted);
            }
            if (_BindOnDestroy) {
                this.BindCommandExecuted(this.EntityCommon.OnDestroy, this.OnDestroyExecuted);
            }
        }
        
        public virtual void OnLeaveWorldExecuted(OnLeaveWorldCommand command) {
        }
        
        public virtual void OnDestroyExecuted(OnDestroyCommand command) {
        }
        
        public virtual void ExecuteOnDestroy(OnDestroyCommand command) {
            command.Sender = EntityCommon;
            EntityCommon.OnDestroy.OnNext(command);
        }
        
        public virtual void ExecuteOnLeaveWorld(OnLeaveWorldCommand command) {
            command.Sender = EntityCommon;
            EntityCommon.OnLeaveWorld.OnNext(command);
        }
    }
}
