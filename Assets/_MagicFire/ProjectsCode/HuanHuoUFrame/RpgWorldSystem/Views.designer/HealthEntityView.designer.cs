// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using MagicFire.HuanHuoUFrame;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class HealthEntityViewBase : EntityModelView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _HP_Max;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _HP;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("OnDead")]
        [UnityEngine.HideInInspector()]
        public bool _BindOnDead = true;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("HP_Max")]
        [UnityEngine.HideInInspector()]
        public bool _BindHP_Max = true;
        
        [uFrame.MVVM.Attributes.UFGroup("HP_Max")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_HP_MaxonlyWhenChanged")]
        protected bool _HP_MaxOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("OnRespawn")]
        [UnityEngine.HideInInspector()]
        public bool _BindOnRespawn = true;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("HP")]
        [UnityEngine.HideInInspector()]
        public bool _BindHP = true;
        
        [uFrame.MVVM.Attributes.UFGroup("HP")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_HPonlyWhenChanged")]
        protected bool _HPOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(HealthEntityViewModel);
            }
        }
        
        public HealthEntityViewModel HealthEntity {
            get {
                return (HealthEntityViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as HealthEntityViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var healthentityview = ((HealthEntityViewModel)model);
            healthentityview.HP_Max = this._HP_Max;
            healthentityview.HP = this._HP;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.HealthEntity to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindOnDead) {
                this.BindCommandExecuted(this.HealthEntity.OnDead, this.OnDeadExecuted);
            }
            if (_BindHP_Max) {
                this.BindProperty(this.HealthEntity.HP_MaxProperty, this.HP_MaxChanged, _HP_MaxOnlyWhenChanged);
            }
            if (_BindOnRespawn) {
                this.BindCommandExecuted(this.HealthEntity.OnRespawn, this.OnRespawnExecuted);
            }
            if (_BindHP) {
                this.BindProperty(this.HealthEntity.HPProperty, this.HPChanged, _HPOnlyWhenChanged);
            }
        }
        
        public virtual void OnDeadExecuted(OnDeadCommand command) {
        }
        
        public virtual void HP_MaxChanged(Int32 arg1) {
        }
        
        public virtual void OnRespawnExecuted(OnRespawnCommand command) {
        }
        
        public virtual void HPChanged(Int32 arg1) {
        }
        
        public virtual void ExecuteOnRespawn(OnRespawnCommand command) {
            command.Sender = HealthEntity;
            HealthEntity.OnRespawn.OnNext(command);
        }
        
        public virtual void ExecuteOnDead(OnDeadCommand command) {
            command.Sender = HealthEntity;
            HealthEntity.OnDead.OnNext(command);
        }
    }
}
