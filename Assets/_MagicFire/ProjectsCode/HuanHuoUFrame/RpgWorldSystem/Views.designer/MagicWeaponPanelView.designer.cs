// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class MagicWeaponPanelViewBase : uFrame.MVVM.Views.ViewBase {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public object _magicWeaponList;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("magicWeaponList")]
        [UnityEngine.HideInInspector()]
        public bool _BindmagicWeaponList = true;
        
        [uFrame.MVVM.Attributes.UFGroup("magicWeaponList")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_magicWeaponListonlyWhenChanged")]
        protected bool _magicWeaponListOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(MagicWeaponSystemViewModel);
            }
        }
        
        public MagicWeaponSystemViewModel MagicWeaponSystem {
            get {
                return (MagicWeaponSystemViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as MagicWeaponSystemViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var magicweaponpanelview = ((MagicWeaponSystemViewModel)model);
            magicweaponpanelview.magicWeaponList = this._magicWeaponList;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.MagicWeaponSystem to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindmagicWeaponList) {
                this.BindProperty(this.MagicWeaponSystem.magicWeaponListProperty, this.magicWeaponListChanged, _magicWeaponListOnlyWhenChanged);
            }
        }
        
        public virtual void magicWeaponListChanged(object arg1) {
        }
        
        public virtual void ExecuteOnSkillStartCast(OnSkillStartCastCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnSkillStartCast.OnNext(command);
        }
        
        public virtual void ExecuteOnSkillEndCast(OnSkillEndCastCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnSkillEndCast.OnNext(command);
        }
        
        public virtual void ExecuteRequestCastSkillByName(RequestCastSkillByNameCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.RequestCastSkillByName.OnNext(command);
        }
        
        public virtual void ExecuteOnSkillStartSing(OnSkillStartSingCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnSkillStartSing.OnNext(command);
        }
        
        public virtual void ExecutelearnGongFa(learnGongFaCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.learnGongFa.OnNext(command);
        }
        
        public virtual void ExecuteRequestStopMove(RequestStopMoveCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.RequestStopMove.OnNext(command);
        }
        
        public virtual void ExecuteOnStopMove(OnStopMoveCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnStopMove.OnNext(command);
        }
        
        public virtual void ExecuteDoMove(DoMoveCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.DoMove.OnNext(command);
        }
        
        public virtual void ExecuteRequestMove(RequestMoveCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.RequestMove.OnNext(command);
        }
        
        public virtual void ExecuteOnRespawn(OnRespawnCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnRespawn.OnNext(command);
        }
        
        public virtual void ExecuteOnDead(OnDeadCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnDead.OnNext(command);
        }
        
        public virtual void ExecuteOnDestroy(OnDestroyCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnDestroy.OnNext(command);
        }
        
        public virtual void ExecuteOnLeaveWorld(OnLeaveWorldCommand command) {
            command.Sender = MagicWeaponSystem;
            MagicWeaponSystem.OnLeaveWorld.OnNext(command);
        }
    }
}
