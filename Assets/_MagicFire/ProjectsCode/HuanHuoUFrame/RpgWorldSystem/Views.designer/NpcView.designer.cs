// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class NpcViewBase : EntityCommonView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _npcID;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _npcType;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _arenaID;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("npcID")]
        [UnityEngine.HideInInspector()]
        public bool _BindnpcID = true;
        
        [uFrame.MVVM.Attributes.UFGroup("npcID")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_npcIDonlyWhenChanged")]
        protected bool _npcIDOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("npcType")]
        [UnityEngine.HideInInspector()]
        public bool _BindnpcType = true;
        
        [uFrame.MVVM.Attributes.UFGroup("npcType")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_npcTypeonlyWhenChanged")]
        protected bool _npcTypeOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("entityName")]
        [UnityEngine.HideInInspector()]
        public bool _BindentityName = true;
        
        [uFrame.MVVM.Attributes.UFGroup("entityName")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_entityNameonlyWhenChanged")]
        protected bool _entityNameOnlyWhenChanged;
        
        [uFrame.MVVM.Attributes.UFToggleGroup("arenaID")]
        [UnityEngine.HideInInspector()]
        public bool _BindarenaID = true;
        
        [uFrame.MVVM.Attributes.UFGroup("arenaID")]
        [UnityEngine.SerializeField()]
        [UnityEngine.HideInInspector()]
        [UnityEngine.Serialization.FormerlySerializedAsAttribute("_arenaIDonlyWhenChanged")]
        protected bool _arenaIDOnlyWhenChanged;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(NpcViewModel);
            }
        }
        
        public NpcViewModel Npc {
            get {
                return (NpcViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as NpcViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var npcview = ((NpcViewModel)model);
            npcview.npcID = this._npcID;
            npcview.npcType = this._npcType;
            npcview.arenaID = this._arenaID;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Npc to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
            if (_BindnpcID) {
                this.BindProperty(this.Npc.npcIDProperty, this.npcIDChanged, _npcIDOnlyWhenChanged);
            }
            if (_BindnpcType) {
                this.BindProperty(this.Npc.npcTypeProperty, this.npcTypeChanged, _npcTypeOnlyWhenChanged);
            }
            if (_BindentityName) {
                this.BindProperty(this.Npc.entityNameProperty, this.entityNameChanged, _entityNameOnlyWhenChanged);
            }
            if (_BindarenaID) {
                this.BindProperty(this.Npc.arenaIDProperty, this.arenaIDChanged, _arenaIDOnlyWhenChanged);
            }
        }
        
        public virtual void npcIDChanged(Int32 arg1) {
        }
        
        public virtual void npcTypeChanged(Int32 arg1) {
        }
        
        public virtual void entityNameChanged(String arg1) {
        }
        
        public virtual void arenaIDChanged(Int32 arg1) {
        }
    }
}
