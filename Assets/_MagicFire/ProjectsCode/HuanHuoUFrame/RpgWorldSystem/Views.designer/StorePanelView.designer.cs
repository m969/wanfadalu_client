// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace MagicFire.HuanHuoUFrame {
    using MagicFire.HuanHuoUFrame;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using uFrame.Kernel;
    using uFrame.Kernel.Serialization;
    using uFrame.MVVM;
    using uFrame.MVVM.Bindings;
    using uFrame.MVVM.Services;
    using uFrame.MVVM.ViewModels;
    using UniRx;
    using UnityEngine;
    
    
    public class StorePanelViewBase : PanelView {
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _lingshiAmount;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public Int32 _sectID;
        
        [UnityEngine.SerializeField()]
        [uFrame.MVVM.Attributes.UFGroup("View Model Properties")]
        [UnityEngine.HideInInspector()]
        public String _skillKeyOptions;
        
        public override string DefaultIdentifier {
            get {
                return base.DefaultIdentifier;
            }
        }
        
        public override System.Type ViewModelType {
            get {
                return typeof(AvatarViewModel);
            }
        }
        
        public AvatarViewModel Avatar {
            get {
                return (AvatarViewModel)ViewModelObject;
            }
        }
        
        protected override void InitializeViewModel(uFrame.MVVM.ViewModels.ViewModel model) {
            base.InitializeViewModel(model);
            // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
            // var vm = model as AvatarViewModel;
            // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
            var storepanelview = ((AvatarViewModel)model);
            storepanelview.lingshiAmount = this._lingshiAmount;
            storepanelview.sectID = this._sectID;
            storepanelview.skillKeyOptions = this._skillKeyOptions;
        }
        
        public override void Bind() {
            base.Bind();
            // Use this.Avatar to access the viewmodel.
            // Use this method to subscribe to the view-model.
            // Any designer bindings are created in the base implementation.
        }
        
        public virtual void ExecuteOnDialogItemsReturn(OnDialogItemsReturnCommand command) {
            command.Sender = Avatar;
            Avatar.OnDialogItemsReturn.OnNext(command);
        }
        
        public virtual void ExecuteOnError(OnErrorCommand command) {
            command.Sender = Avatar;
            Avatar.OnError.OnNext(command);
        }
        
        public virtual void ExecuteSelectDialogItem(SelectDialogItemCommand command) {
            command.Sender = Avatar;
            Avatar.SelectDialogItem.OnNext(command);
        }
        
        public virtual void ExecuteOnTargetItemListReturn(OnTargetItemListReturnCommand command) {
            command.Sender = Avatar;
            Avatar.OnTargetItemListReturn.OnNext(command);
        }
        
        public virtual void ExecuteTeleport(TeleportCommand command) {
            command.Sender = Avatar;
            Avatar.Teleport.OnNext(command);
        }
        
        public virtual void ExecuteRequestDialog(RequestDialogCommand command) {
            command.Sender = Avatar;
            Avatar.RequestDialog.OnNext(command);
        }
        
        public virtual void ExecuteonMainAvatarEnterSpace(onMainAvatarEnterSpaceCommand command) {
            command.Sender = Avatar;
            Avatar.onMainAvatarEnterSpace.OnNext(command);
        }
        
        public virtual void ExecuteonMainAvatarLeaveSpace(onMainAvatarLeaveSpaceCommand command) {
            command.Sender = Avatar;
            Avatar.onMainAvatarLeaveSpace.OnNext(command);
        }
        
        public virtual void ExecuteOnJoinSectResult(OnJoinSectResultCommand command) {
            command.Sender = Avatar;
            Avatar.OnJoinSectResult.OnNext(command);
        }
        
        public virtual void ExecuteOnRequestForgeResult(OnRequestForgeResultCommand command) {
            command.Sender = Avatar;
            Avatar.OnRequestForgeResult.OnNext(command);
        }
    }
}
